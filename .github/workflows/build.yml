name: Build OpenWrt Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'ImmortalWrt Version'
        required: true
        default: '23.05.4'
        type: choice
        options:
          - '23.05.4'
          - '23.05.3'
          - '21.02.7'
          - 'snapshot'
      arch:
        description: 'Target Architecture'
        required: true
        default: 'x86/64'
        type: choice
        options:
          - 'x86/64'
          - 'ramips/mt7621'
          - 'rockchip/armv8'
          - 'bcm27xx/bcm2711'

# 添加权限配置
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup OpenWrt SDK
      run: |
        # 构建SDK URL
        if [ "${{ github.event.inputs.version }}" = "snapshot" ]; then
          SDK_BASE_URL="https://downloads.immortalwrt.org/snapshots/targets/${{ github.event.inputs.arch }}"
        else
          SDK_BASE_URL="https://downloads.immortalwrt.org/releases/${{ github.event.inputs.version }}/targets/${{ github.event.inputs.arch }}"
        fi
        
        # 获取SDK文件名
        SDK_INFO=$(curl -s "${SDK_BASE_URL}/profiles.json")
        SDK_FILENAME=$(echo "$SDK_INFO" | grep -o "immortalwrt-sdk-.*linux-x86_64.tar.xz" | head -n1)
        
        echo "Downloading SDK from: ${SDK_BASE_URL}/${SDK_FILENAME}"
        wget "${SDK_BASE_URL}/${SDK_FILENAME}" -O sdk.tar.xz
        
        echo "Extracting SDK..."
        tar xf sdk.tar.xz
        
        echo "Checking extracted contents..."
        ls -la
        
        # 移动SDK目录
        SDK_FOLDER=$(ls -d immortalwrt-sdk-*)
        if [ -d "$SDK_FOLDER" ]; then
          echo "Moving SDK folder: $SDK_FOLDER"
          mv "$SDK_FOLDER" sdk
        else
          echo "Error: SDK folder not found!"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        
    - name: Install Dependencies
      run: |
        cd sdk
        echo "Current feeds configuration:"
        cat feeds.conf.default
        
        echo "Updating and installing feeds..."
        ./scripts/feeds clean
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Prepare Package
      run: |
        echo "Current directory contents:"
        ls -la
        
        echo "Creating package directory..."
        mkdir -p sdk/package/luci-app-cloudflare-ddns
        
        echo "Copying files..."
        cp -rv Makefile luasrc root sdk/package/luci-app-cloudflare-ddns/
        
        echo "Package directory contents:"
        ls -la sdk/package/luci-app-cloudflare-ddns/
        
    - name: Build Package
      run: |
        cd sdk
        make defconfig
        make package/luci-app-cloudflare-ddns/compile V=s || {
          echo "Build failed. Checking logs..."
          find . -name "*.log" -exec cat {} \;
          exit 1
        }
        
    - name: Upload IPK
      uses: actions/upload-artifact@v3
      with:
        name: luci-app-cloudflare-ddns-${{ github.event.inputs.arch }}-${{ github.event.inputs.version }}
        path: sdk/bin/packages/*/base/luci-app-cloudflare-ddns_*.ipk
        
    - name: Create Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        files: sdk/bin/packages/*/base/luci-app-cloudflare-ddns_*.ipk
        tag_name: v${{ github.event.inputs.version }}-${{ github.event.inputs.arch }}-${{ github.run_number }}
        name: Release ${{ github.event.inputs.version }} for ${{ github.event.inputs.arch }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
